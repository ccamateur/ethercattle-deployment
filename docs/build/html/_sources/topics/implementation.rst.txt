Implementation
==============

In `go-ethereum/internal/ethapi/backend.go`, a Backend interface is specified.
Objects filling this interface can be passed to ethapi.GetAPIS() to return
`[]rpc.API`, which can be used to serve the Ethereum RPC APIs. Presently there
are two implementations of the Backend interface, one for full Ethereum nodes
and one for Light Ethereum nodes that depend on the LES protocol.

This project will implement a third backend implementation, which will provide
the necessary information to ethapi.GetAPIs() to in turn provide the RPC APIs.

Backend Functions To Implement
------------------------------

This section explores each of the 26 methods required by the Backend interface.
This is an initial pass, and attempts to implement these methods may prove more
difficult than described below.

Downloader()
............

Downloader must return a `*go-ethereum/eth/downloader.Downloader` object.
Normally the `Downloader` object is responsible for managing relationships with
remote peers, and synchronizing the block from remote peers. As our replicas
will receive data directly via Kafka, the Downloader object won't see much use.
Even so, the `PublicEthereumAPI` struct expects to be able to retrieve a
`Downloader` object so that it can provide the `eth_syncing` API call.

If the Backend interface required an interface for a downloader rather than a
specific Downloader object, we could stub out at Downloader that provided the
`eth_syncing` data based on the current Kafka sync state. Unfortunately the
Downloader requires a specific object constructed with the following
properties:

* `mode SyncMode` - An integer indicating whether the SyncMode is Fast, Full, or Light. We can probably specify "light" for our purposes.
* `stateDb ethdb.Database` - An interface to LevelDB. Our backend will neeed a Database instance, so this should be easy.
* `mux *event.TypeMux` - Used only for syncing with peers. If we avoid calling Downloader.Synchronize(), it appears this can safely be nil.
* `chain BlockChain` - An object providing the downloader.BlockChain interface. If we only need to support Downloader.Progress(), and we set SyncMode to LightSync, this can be nil.
* `lightchain LightChain` - An object providing the downloader.LightChain interface. If we only need to support Downloader.Progress(), and we set SyncMode to LightSync, we will need to stub this out and provide CurrentHeader() with the correct blocknumber.
* `dropPeer peerDropFn` - Only used when syncing with peers. If we avoid calling Downloader.Synchronize(), this can be `func(string) {}`

Constructing a `Downloader` with the preceding arguments should provide the
capabilities we need to offer the `eth_progress` RPC call.

ProtocolVersion()
.................

This just needs to return an integer indicating the protocol version. This
tells us what version of the peer-to-peer protocol the Ethereum client is
using. As replicas will not use a peer-to-peer protocol, it might make sense
for this to be a value like `-1`.

SuggestPrice()
..............

Should return a `big.Int` gas price for a transaction. This can use
`*go-ethereum/eth/gasprice.Oracle` to provide the same values a stanard
Ethereum node would provide. Note, however, that gasprice.Oracle requires a
Backend object of its own, so implementing SuggestPrice() will need to wait
until the following backend methods have been implemented:

* `HeaderByNumber()`
* `BlockByNumber()`
* `ChainConfig()`

ChainDb()
.........

Our backend will need to be constructed with an `ethdb.Database` object, which
will be it's primary source for much of the information about the blockchain
and state. This method will return that object.

For replicas, it might be prudent to have a wrapper that provides the
`ethdb.Database` interface, but errors on any write operations, as we want to
ensure that all write operations to the primary database come from the
replication process.

EventMux()
..........

This seem to be used by peer-to-peer systems. I can't find anything in the RPC
system that depends on `EventMux()`, so I think we can return `nil` for the
Replica backend.

AccountManager()
................

This returns an `*accounts.Manager` object, which manages access to Ethereum
wallets and other secret data. This would be used by the Private Ethereum APIs,
which our Replicas will not implement. Services that need to manage accounts in
conjunction with replica RPC nodes should utilize client side account managers
such as `Web3 Provider Engine <https://www.npmjs.com/package/web3-provider-engine>`_.

In a future phase we may decide to implement an AccountManager service for
replica nodes, but this would require serious consideration for how to securely
store credentials and share them across the replicas in a cluster.

SetHead()
.........

This is used by the private debug APIs, allowing developers to set the
blockchain back to an earlier state in private environments. Replicas should
not be able to roll back the blockchain to an earlier state, so this method
should be a no-op.

HeaderByNumber()
................

HeaderByNumber needs to return a `*core/types.Header` object corresponding to
the specified block number. This will need to get information from the
database. It might be possible to leverage in-memory caches to speed up these
data lookups, but it must not rely on information normally provided by the
peer-to-peer protocol manager.

This should be able to use `core.GetCanonicalHash()` to get the blockhash, then
`core.GetHeader()` to get the Block Number.

BlockByNumber()
...............

BlockByNumber needs to return a `*core/types.Block` object corresponding to the
specified block number. This will need to get information from the
database. It might be possible to leverage in-memory caches to speed up these
data lookups, but it must not rely on information normally provided by the
peer-to-peer protocol manager.

This should be able to use `core.GetCanonicalHash()` to get the blockhash, then
`core.GetBlock()` to get the Block Number.

StateAndHeaderByNumber()
........................

Needs to return a `*core/state.StateDB` object and a `*core/types.Header`
object corresponding to the specified block number.

The header can be retrieved with `backend.HeaderByNumber()`. Then the stateDB
object can be created with `core/state.New()` given the hash from the retrieved
header and the ethdb.Database.

GetBlock()
..........

Needs to return a `*core/types.Block` given a `common.Hash`. This should be
able to use `core.GetBlockNumber()` to get the block number for the hash, and
`core.GetBlock()` to retrieve the `*core/types.Block`.

GetReceipts()
.............

Needs to return a `core/types.Receipts` given a `common.Hash`. This should be
able to use `core.GetBlockNumber()` to get the block number for the hash, and
`core.GetBlockReceipts()` to retrieve the `core/types.Receipts`.

GetTd()
.......

Needs to return a `*big.Int` given a `common.Hash`. This should be able to use
`core.GetBlockNumber()` to get the block number for the hash, and
`core.GetTd()` to retrieve the total difficulty.

GetEVM()
........

Needs to return a `*core/vm.EVM`.

This requires a `core.ChainContext` object, which in turn needs to implement:

* `Engine()` - A conensus engine instance. This should reflect the conensus
  engine of the server the replica is replicating. This would be Ethash for
  Mainnet, but may be Clique or eventually Casper for other networks.
* `GetHeader()` - Can proxy `backend.GetHeader()`

Beyond the construction of a new `ChainContext`, this should be comparable to
the implementation of eth/api_backend.go's `GetEVM()`

Subscribe Event APIs
....................

The following methods exist as part of the Event Filtering system.

* `SubscribeChainEvent()`
* `SubscribeChainHeadEvent()`
* `SubscribeChainSideEvent()`

As discussed in :ref:`load-balancing`, the initial implementation of the replica
service will not support the filtering APIs. As such, these methods can be
no-ops that simply return `nil`. In the future we may implement these methods,
but it will need to be a completely new implementation to support filtering on
the cluster instead of individual replicas.

SendTx()
........

As replica nodes will not have peer-to-peer connections, they will not be able
to send transactions to the network via conventional methods. Instead, we
propose that the replica will simply queue transactions onto a Kafka topic.
Independent from the replica service we can have consumers of the transaction
topic emit the transactions to the network using different methods. The scope
of implementing `SendTx()` is limited to placing the transaction onto a Kafka
topic. Processing those events and emitting them to the network will be
discused in :ref:`tx-emitters`.

GetPoolTransactions()
.....................

GetPoolTransactions()

GetPoolTransaction()
....................

GetPoolTransaction()

GetPoolNonce()
..............

GetPoolNonce()

Stats()
.......

Stats()

TxPoolContent()
...............

TxPoolContent()

SubscribeTxPreEvent()
.....................

SubscribeTxPreEvent()

ChainConfig()
.............

ChainConfig()

CurrentBlock()
..............

CurrentBlock()

.. _tx-emitters:

Transaction Emitters
--------------------
