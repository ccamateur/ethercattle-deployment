Description: A master and pool of replicas for Ether Cattle

Parameters:
  MasterInstanceType:
    AllowedValues:
      - t2.micro
      - t3.micro
      - t2.small
      - t3.small
      - t2.medium
      - t3.medium
      - t2.large
      - t3.large
      - t2.xlarge
      - t3.xlarge
      - t2.2xlarge
      - t3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.10xlarge
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.10xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.8xlarge
      - c5d.large
      - c5d.xlarge
      - c5d.2xlarge
      - c5d.4xlarge
      - c5d.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
    ConstraintDescription: Must be a valid EC2 HVM instance type.
    Default: m5.large
    Description: EC2 HVM instance type (t2.micro, m3.medium, etc).
    Type: String
  DiskSize:
    Default: '250'
    Description: Size of each node's chaindata storage volume in GiB
    MaxValue: '1024'
    MinValue: '8'
    Type: Number
  MasterDiskType:
    AllowedValues:
    - standard
    - gp2
    - st1
    - sc1
    Default: gp2
    Description: Master ephemeral storage volume type
    Type: String
  ReplicaDiskType:
    AllowedValues:
    - standard
    - gp2
    - st1
    - sc1
    Default: st1
    Description: Master ephemeral storage volume type
    Type: String
  StandardAMI:
    Default: ami-02bcbb802e03574ba
    Type: String
    Description: The base AMI for all cluster nodes
  ARMAMI:
    Default: ami-06a134062219ad132
    Type: String
    Description: The base AMI for all cluster nodes
  S3GethBucketName:
    Default: ethercattle-binaries
    Type: String
    Description: The bucket containing EtherCattle Geth Binaries
  InfrastructureStack:
    Type: String
    Description: The infrastructure stack this cluster connects to
  KeyName:
    Type: String
    Description: The name of the SSH key pair allowed to SSH into the nodes
  KafkaTopic:
    Type: String
    Description: A name for the Kafka Topic between the master and replicas. This must be unique for each cluster.
  NetworkId:
    Type: String
    Description: An identifier for the network this cluster represents. This should be common across all clusters representing the same network.
  MasterSnapshotId:
    Type: String
    Default: snap-07662377c63d2f725
    Description: A snapshot of the Ethereum folder with a synced blockchain
  ReplicaSnapshotId:
    Type: String
    Default: snap-07662377c63d2f725
    Description: A snapshot of the Ethereum folder with a synced blockchain
  MasterExtraFlags:
    Type: String
    Description: Extra flags for the Geth master (mainly for running other than mainnet)
  ReplicaExtraFlags:
    Type: String
    Description: Extra flags for the Geth replica (mainly for running other than mainnet)
  ReplicaTargetCapacity:
    Type: Number
    Default: 8
    Description: Target compute capacity for replicas
  ExternalTargetGroup:
    Type: String
    Description: Optional external target group to register replicas on
  UseStandardTargetGroup:
    Type: Number
    AllowedValues:
      - 0
      - 1
    Default: 1
    Description: Whether or not to connect replicas to the load balancer from the infrastructure stack


Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  UseSTG: !Equals [ !Ref UseStandardTargetGroup, 1]
  HasETG: !Not [!Equals [!Ref ExternalTargetGroup, '']]
  ReplicaHDD: !Or [!Equals [ !Ref ReplicaDiskType, "st1"], !Equals [ !Ref ReplicaDiskType, "sc1"]]
  ReplicaDefaultSize: !Equals [ !Ref DiskSize, "250" ]
  OverrideSize: !And [!Condition ReplicaDefaultSize, !Condition ReplicaHDD]

Resources:
  MasterLG:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName:
        "Fn::Sub":
          - "/${ClusterId}/${KafkaTopic}/master"
          - ClusterId:
              "Fn::ImportValue": !Sub "${InfrastructureStack}-ClusterId"
  MasterNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow external SSH access
      VpcId:
        "Fn::ImportValue": !Sub "${InfrastructureStack}-VpcId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Join ["", ["Fn::ImportValue": !Sub "${InfrastructureStack}-VpcBaseIp", ".0.0/16"]]
      - IpProtocol: udp
        FromPort: '30303'
        ToPort: '30303'
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: '30303'
        ToPort: '30303'
        CidrIp: '0.0.0.0/0'
      - IpProtocol: udp
        FromPort: '30301'
        ToPort: '30301'
        CidrIp: '0.0.0.0/0'
  MasterNodeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - autoscaling.amazonaws.com
        Version: '2012-10-17'
  MasterNodePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref MasterNodeRole
      PolicyName: !Sub "MasterNode${KafkaTopic}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
            Sid: Stmt3
          - Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:GetBucketPolicy
              - s3:GetObjectTagging
              - s3:GetBucketLocation
            Resource: !Sub arn:aws:s3:::${S3GethBucketName}/*
            Effect: Allow
          - Action:
              - cloudwatch:PutMetricData
              - ec2:DescribeTags
              - logs:PutLogEvents
              - logs:DescribeLogStreams
              - logs:DescribeLogGroups
              - logs:CreateLogStream
              - logs:CreateLogGroup
            Resource: "*"
            Effect: Allow
          - Action:
              - ssm:GetParameter
            Resource: !Sub "arn:aws:ssm:*:*:parameter/${MetricsConfigParameter}"
            Effect: Allow
  MasterNodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
      - !Ref MasterNodeRole
    DependsOn: MasterNodeRole
  MetricsConfigParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Type: String
      Value: '{"metrics":{"append_dimensions":{"AutoScalingGroupName":"${aws:AutoScalingGroupName}"},"metrics_collected":{"cpu":{"measurement":["cpu_usage_idle","cpu_usage_iowait","cpu_usage_user","cpu_usage_system","cpu_usage_irq","cpu_usage_softirq"],"metrics_collection_interval":60,"resources":["*"],"totalcpu":false},"disk":{"measurement":["used_percent","inodes_free"],"metrics_collection_interval":60,"resources":["*"]},"diskio":{"measurement":["io_time"],"metrics_collection_interval":60,"resources":["*"]},"mem":{"measurement":["mem_used_percent"],"metrics_collection_interval":60},"statsd":{"metrics_aggregation_interval":60,"metrics_collection_interval":10,"service_address":":8125"},"swap":{"measurement":["swap_used_percent"],"metrics_collection_interval":60}}}}'
  MasterLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref StandardAMI
        InstanceType: !Ref MasterInstanceType
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${KafkaTopic}-Master"
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Sub "${KafkaTopic}-Master"
        SecurityGroupIds:
          - !Sub ${MasterNodeSecurityGroup.GroupId}
        IamInstanceProfile:
          Name: !Ref MasterNodeInstanceProfile
        KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
        BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
        - DeviceName: "/dev/sdf"
          Ebs:
            VolumeSize: !Ref DiskSize
            VolumeType: !Ref MasterDiskType
            SnapshotId: !Ref MasterSnapshotId
        UserData:
          "Fn::Base64":
            "Fn::Sub":
              - |
                #!/bin/bash -xe
                if [ "$(arch)" == "x86_64" ]
                then
                  ARCH="amd64"
                elif [ "$(arch)" == "aarch64" ]
                then
                  ARCH="arm64"
                fi
                GETH_BIN="geth-linux-$ARCH"
                LOGS_BIN="journald-cloudwatch-logs-$ARCH"
                aws s3 cp s3://${S3GethBucketName}/$GETH_BIN /usr/bin/geth
                aws s3 cp s3://${S3GethBucketName}/$LOGS_BIN /usr/local/bin/journald-cloudwatch-logs
                chmod +x /usr/bin/geth
                chmod +x /usr/local/bin/journald-cloudwatch-logs
                mkdir -p /var/lib/journald-cloudwatch-logs/
                mkdir -p /var/lib/ethereum
                mount /dev/nvme1n1 /var/lib/ethereum
                useradd -r geth
                chown -R geth /var/lib/ethereum

                echo "/dev/nvme1n1  /var/lib/ethereum    ext4   defaults,noatime  1   1" >> /etc/fstab

                yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/$ARCH/latest/amazon-cloudwatch-agent.rpm fio nmap-ncat jq

                fio --filename=/dev/nvme1n1 --rw=read --bs=128k --iodepth=32 --ioengine=libaio --direct=1 --name=volume-initialize &

                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${MetricsConfigParameter} -s

                printf "[Unit]\nDescription=Ethereum go client\nAfter=syslog.target network.target\n\n[Service]\nUser=geth\nGroup=geth\nEnvironment=HOME=/var/lib/ethereum\nType=simple\nExecStart=/usr/bin/geth ${MasterExtraFlags} --gcmode=archive --kafka.broker=${KafkaHostname} --datadir=/var/lib/ethereum --kafka.topic=${KafkaTopic}\nKillMode=process\nKillSignal=SIGINT\nTimeoutStopSec=90\nRestart=on-failure\nRestartSec=10s\n\n[Install]\nWantedBy=multi-user.target\n" > /etc/systemd/system/geth.service

                printf "[Unit]\nDescription=Ethereum go client transaction relay\nAfter=syslog.target network.target geth\n\n[Service]\nUser=geth\nGroup=geth\nEnvironment=HOME=/var/lib/ethereum\nType=simple\nExecStart=/usr/bin/geth txrelay --kafka.broker=${KafkaHostname} --kafka.tx.topic=${NetworkId}-tx --kafka.tx.consumergroup=${KafkaTopic}-cg /var/lib/ethereum/geth.ipc\nKillMode=process\nKillSignal=SIGINT\nTimeoutStopSec=90\nRestart=on-failure\nRestartSec=10s\nStandardOutput=file:/var/log/geth-tx.log\nStandardError=inherit\n\n[Install]\nWantedBy=multi-user.target\n" > /etc/systemd/system/geth-tx.service

                printf "[Unit]\nDescription=journald-cloudwatch-logs\nWants=basic.target\nAfter=basic.target network.target\n\n[Service]\nExecStart=/usr/local/bin/journald-cloudwatch-logs /usr/local/etc/journald-cloudwatch-logs.conf\nKillMode=process\nRestart=on-failure\nRestartSec=42s" > /etc/systemd/system/journald-cloudwatch-logs.service

                printf "log_group = \"${MasterLG}\"\nstate_file = \"/var/lib/journald-cloudwatch-logs/state\"" > /usr/local/etc/journald-cloudwatch-logs.conf

                printf "#!/bin/bash\nwhile true; do\n  printf \"peerCount: \"\n  echo '{\"jsonrpc\":\"2.0\",\"method\":\"net_peerCount\",\"params\":[],\"id\":64}' | nc -U /var/lib/ethereum/geth.ipc | jq -cr '\"ibase=16;obase=A;\" + (.result | ltrimstr(\"0x\") | ascii_upcase)' | bc\n  sleep 30\ndone" > /usr/local/bin/peerData.sh
                chmod +x /usr/local/bin/peerData.sh

                printf "[Unit]\nDescription=Geth Peer Monitoring\nWants=basic.target\nAfter=basic.target network.target geth\n\n[Service]\nExecStart=/usr/local/bin/peerData.sh\nKillMode=process\nRestart=on-failure\nRestartSec=42s" > /etc/systemd/system/geth-peer-data.service

                systemctl daemon-reload
                systemctl enable geth.service
                systemctl start geth.service
                systemctl enable geth-tx.service
                systemctl start geth-tx.service
                systemctl enable amazon-cloudwatch-agent.service
                systemctl start amazon-cloudwatch-agent.service
                systemctl enable journald-cloudwatch-logs
                systemctl start journald-cloudwatch-logs
                systemctl enable geth-peer-data.service
                systemctl start geth-peer-data.service
              - KafkaHostname:
                  "Fn::ImportValue": !Sub "${InfrastructureStack}-Kafka2HostnameA"
                ClusterId:
                  "Fn::ImportValue": !Sub "${InfrastructureStack}-ClusterId"

  MasterAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - "Fn::ImportValue":
            !Sub "${InfrastructureStack}-PublicA"
        - "Fn::ImportValue":
            !Sub "${InfrastructureStack}-PublicB"
        - "Fn::ImportValue":
            !Sub "${InfrastructureStack}-PublicC"
      LaunchTemplate:
        LaunchTemplateId: !Ref MasterLaunchTemplate
        Version: !Sub ${MasterLaunchTemplate.LatestVersionNumber}
      MinSize: 1
      MaxSize: 7
      DesiredCapacity: 1
      HealthCheckType: EC2
      MetricsCollection:
      - Granularity: 1Minute
        Metrics:
        - GroupInServiceInstances
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}
        PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: '1'
        PauseTime: PT5M
        SuspendProcesses:
        - AlarmNotification
        WaitOnResourceSignals: false

  AggregatedNotifications:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Aggregated Notifications
  MasterDiskSNS:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Master Disk
  MasterDiskAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref MasterDiskSNS
        - !Ref AggregatedNotifications
      AlarmDescription: "Alarms when the ethereum data directory > 95% full"
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: AutoScalingGroupName
          Value : !Ref MasterAutoScalingGroup
        - Name: device
          Value : "nvme1n1"
        - Name: fstype
          Value : "ext4"
        - Name: path
          Value : "/var/lib/ethereum"
      InsufficientDataActions:
        - !Ref MasterDiskSNS
        - !Ref AggregatedNotifications
      EvaluationPeriods: 5
      MetricName: "disk_used_percent"
      Namespace: CWAgent
      OKActions:
        - !Ref MasterDiskSNS
        - !Ref AggregatedNotifications
      Period: 60
      Statistic: Maximum
      Threshold: 95
      TreatMissingData: missing
  MasterMemSNS:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Master RAM
  MasterMemAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref MasterMemSNS
        - !Ref AggregatedNotifications
      AlarmDescription: "Alarms when the master RAM > 75%"
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: AutoScalingGroupName
          Value : !Ref MasterAutoScalingGroup
      InsufficientDataActions:
        - !Ref MasterMemSNS
        - !Ref AggregatedNotifications
      EvaluationPeriods: 5
      MetricName: "mem_used_percent"
      Namespace: CWAgent
      OKActions:
        - !Ref MasterMemSNS
        - !Ref AggregatedNotifications
      Period: 60
      Statistic: Maximum
      Threshold: 75
      TreatMissingData: missing
  MasterCPUSNS:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Master RAM
  MasterCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref MasterCPUSNS
        - !Ref AggregatedNotifications
      AlarmDescription: "Alarms when the master CPU > 80%"
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: AutoScalingGroupName
          Value : !Ref MasterAutoScalingGroup
      InsufficientDataActions:
        - !Ref MasterCPUSNS
        - !Ref AggregatedNotifications
      EvaluationPeriods: 5
      MetricName: "mem_used_percent"
      Namespace: CWAgent
      OKActions:
        - !Ref MasterCPUSNS
        - !Ref AggregatedNotifications
      Period: 60
      Statistic: Maximum
      Threshold: 80
      TreatMissingData: missing
  MasterPeerCountSNS:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Master Peer Count
  MasterPeerCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref MasterPeerCountSNS
        - !Ref AggregatedNotifications
      AlarmDescription: "Alarms when the master PeerCount < 10"
      ComparisonOperator: "LessThanThreshold"
      Dimensions:
        - Name: clusterId
          Value : !Ref KafkaTopic
      InsufficientDataActions:
        - !Ref MasterPeerCountSNS
        - !Ref AggregatedNotifications
      EvaluationPeriods: 5
      MetricName: "peerCount"
      Namespace: CWAgent
      OKActions:
        - !Ref MasterPeerCountSNS
        - !Ref AggregatedNotifications
      Period: 60
      Statistic: Maximum
      Threshold: 10
      TreatMissingData: missing
  LogMetricsFunctionLG:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName:
        "Fn::Sub":
          - "/aws/lambda/${ClusterId}/${KafkaTopic}/logParser"
          - ClusterId:
              "Fn::ImportValue": !Sub "${InfrastructureStack}-ClusterId"

  LogMetricsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
  LogMetricsFunctionPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref LogMetricsRole
      PolicyName: !Sub "MasterLogMetrics${KafkaTopic}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "*"
          - Effect: Allow
            Action:
              - "cloudwatch:PutMetricData"
            Resource: "*"
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
  MasterLogMetricsFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3GethBucketName
        S3Key: logMonitor-v8.zip
      Description: "A lambda function to process Geth logs into metrics"
      Environment:
        Variables:
          CLUSTER_ID: !Sub ${KafkaTopic}
      Handler: "logMonitor.masterHandler"
      Role: !Sub ${LogMetricsRole.Arn}
      Runtime: python3.7
  MasterLogMetricsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub ${MasterLogMetricsFunction.Arn}
      FilterPattern: '{$.systemdUnit = "geth.service" || $.systemdUnit = "geth-peer-data.service"}'
      LogGroupName: !Ref MasterLG
  MasterLogMetricFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub ${MasterLogMetricsFunction.Arn}
      Action: 'lambda:InvokeFunction'
      Principal: !Sub logs.${AWS::Region}.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub ${MasterLG.Arn}

  MasterBlockAgeSNS:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Block Age
  MasterBlockAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref MasterBlockAgeSNS
        - !Ref AggregatedNotifications
      AlarmDescription: "Alarms when the block age > 120"
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: clusterId
          Value : !Ref KafkaTopic
      EvaluationPeriods: 3
      MetricName: "age"
      Namespace: BlockData
      OKActions:
        - !Ref MasterBlockAgeSNS
        - !Ref AggregatedNotifications
      Period: 30
      Statistic: Maximum
      Threshold: 120
      TreatMissingData: notBreaching

  ReplicaLG:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName:
        "Fn::Sub":
          - "/${ClusterId}/${KafkaTopic}/replica"
          - ClusterId:
              "Fn::ImportValue": !Sub "${InfrastructureStack}-ClusterId"
  ReplicaNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow external SSH access
      VpcId:
        "Fn::ImportValue": !Sub "${InfrastructureStack}-VpcId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Join ["", ["Fn::ImportValue": !Sub "${InfrastructureStack}-VpcBaseIp", ".0.0/16"]]
      - IpProtocol: tcp
        FromPort: '8545'
        ToPort: '8545'
        CidrIp: !Join ["", ["Fn::ImportValue": !Sub "${InfrastructureStack}-VpcBaseIp", ".0.0/16"]]
  ReplicaNodeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - autoscaling.amazonaws.com
        Version: '2012-10-17'
  ReplicaNodePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref ReplicaNodeRole
      PolicyName: !Sub "ReplicaNode${KafkaTopic}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
            Sid: Stmt3
          - Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:GetBucketPolicy
              - s3:GetObjectTagging
              - s3:GetBucketLocation
            Resource: !Sub arn:aws:s3:::${S3GethBucketName}/*
            Effect: Allow
          - Action:
              - cloudwatch:PutMetricData
              - ec2:DescribeTags
              - logs:PutLogEvents
              - logs:DescribeLogStreams
              - logs:DescribeLogGroups
              - logs:CreateLogStream
              - logs:CreateLogGroup
            Resource: "*"
            Effect: Allow
          - Action:
              - ssm:GetParameter
            Resource: !Sub "arn:aws:ssm:*:*:parameter/${MetricsConfigParameter}"
            Effect: Allow
  ReplicaNodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
      - !Ref ReplicaNodeRole
    DependsOn: ReplicaNodeRole

  ReplicaLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref StandardAMI
        InstanceType: c5.large
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${KafkaTopic}-Replica"
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Sub "${KafkaTopic}-Replica"
        SecurityGroupIds:
          - !Sub ${ReplicaNodeSecurityGroup.GroupId}
        IamInstanceProfile:
          Name: !Ref ReplicaNodeInstanceProfile
        KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
        BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
        - DeviceName: "/dev/sdf"
          Ebs:
            VolumeSize: !If [OverrideSize, 500, !Ref DiskSize]
            VolumeType: !Ref ReplicaDiskType
            SnapshotId: !Ref ReplicaSnapshotId
        UserData:
          "Fn::Base64":
            "Fn::Sub":
              - |
                #!/bin/bash -xe
                if [ "$(arch)" == "x86_64" ]
                then
                  ARCH="amd64"
                elif [ "$(arch)" == "aarch64" ]
                then
                  ARCH="arm64"
                fi
                GETH_BIN="geth-linux-$ARCH"
                LOGS_BIN="journald-cloudwatch-logs-$ARCH"
                aws s3 cp s3://${S3GethBucketName}/$GETH_BIN /usr/bin/geth
                aws s3 cp s3://${S3GethBucketName}/$LOGS_BIN /usr/local/bin/journald-cloudwatch-logs
                chmod +x /usr/bin/geth
                chmod +x /usr/local/bin/journald-cloudwatch-logs
                mkdir -p /var/lib/journald-cloudwatch-logs/
                mkdir -p /var/lib/ethereum
                mount /dev/nvme1n1 /var/lib/ethereum
                useradd -r geth
                chown -R geth /var/lib/ethereum

                echo "/dev/nvme1n1  /var/lib/ethereum    ext4   defaults,noatime  1   1" >> /etc/fstab

                yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/$ARCH/latest/amazon-cloudwatch-agent.rpm

                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${MetricsConfigParameter} -s

                printf "[Unit]\nDescription=Ethereum go client replica\nAfter=syslog.target network.target\n\n[Service]\nUser=geth\nGroup=geth\nEnvironment=HOME=/var/lib/ethereum\nType=simple\nExecStart=/usr/bin/geth replica ${ReplicaExtraFlags} --kafka.broker=${KafkaHostname} --datadir=/var/lib/ethereum --kafka.topic=${KafkaTopic} --kafka.tx.topic=${NetworkId}-tx\nKillMode=process\nKillSignal=SIGINT\nTimeoutStopSec=90\nRestart=on-failure\nRestartSec=10s\n\n[Install]\nWantedBy=multi-user.target\n" > /etc/systemd/system/geth.service

                printf "[Unit]\nDescription=journald-cloudwatch-logs\nWants=basic.target\nAfter=basic.target network.target\n\n[Service]\nExecStart=/usr/local/bin/journald-cloudwatch-logs /usr/local/etc/journald-cloudwatch-logs.conf\nKillMode=process\nRestart=on-failure\nRestartSec=42s" > /etc/systemd/system/journald-cloudwatch-logs.service

                printf "log_group = \"${ReplicaLG}\"\nstate_file = \"/var/lib/journald-cloudwatch-logs/state\"" > /usr/local/etc/journald-cloudwatch-logs.conf

                systemctl daemon-reload
                systemctl enable geth.service
                systemctl start geth.service
                systemctl enable amazon-cloudwatch-agent.service
                systemctl start amazon-cloudwatch-agent.service
                systemctl enable journald-cloudwatch-logs
                systemctl start journald-cloudwatch-logs
              - KafkaHostname:
                  "Fn::ImportValue": !Sub "${InfrastructureStack}-Kafka2HostnameA"
                ClusterId:
                  "Fn::ImportValue": !Sub "${InfrastructureStack}-ClusterId"
  ReplicaSpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        LoadBalancersConfig:
          TargetGroupsConfig:
            TargetGroups:
              - !If [UseSTG, {Arn: {"Fn::ImportValue": !Sub "${InfrastructureStack}-RPCALBGroup"}}, !Ref 'AWS::NoValue']
              - !If [HasETG, {"Arn": !Ref ExternalTargetGroup}, !Ref 'AWS::NoValue']
        AllocationStrategy: diversified
        IamFleetRole: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-ec2-spot-fleet-tagging-role"
        TargetCapacity: !Ref ReplicaTargetCapacity
        SpotPrice: 0.0104
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref ReplicaLaunchTemplate
              Version: !Sub ${ReplicaLaunchTemplate.LatestVersionNumber}
            Overrides:
              - InstanceType: m5.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicA"
                WeightedCapacity: 9
              - InstanceType: m5.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicB"
                WeightedCapacity: 9
              - InstanceType: m5.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicC"
                WeightedCapacity: 9
              - InstanceType: m5a.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicA"
                WeightedCapacity: 8
              - InstanceType: m5a.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicB"
                WeightedCapacity: 8
              - InstanceType: m5a.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicC"
                WeightedCapacity: 8
              - InstanceType: m5ad.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicA"
                WeightedCapacity: 8
              - InstanceType: m5ad.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicB"
                WeightedCapacity: 8
              - InstanceType: m5ad.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicC"
                WeightedCapacity: 8
              - InstanceType: m5d.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicA"
                WeightedCapacity: 9
              - InstanceType: m5d.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicB"
                WeightedCapacity: 9
              - InstanceType: m5d.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicC"
                WeightedCapacity: 9
              - InstanceType: c5.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicA"
                WeightedCapacity: 8
              - InstanceType: c5.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicB"
                WeightedCapacity: 8
              - InstanceType: c5.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicC"
                WeightedCapacity: 8
              - InstanceType: c5n.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicA"
                WeightedCapacity: 8
              - InstanceType: c5n.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicB"
                WeightedCapacity: 8
              - InstanceType: c5n.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicC"
                WeightedCapacity: 8
              - InstanceType: c5d.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicA"
                WeightedCapacity: 8
              - InstanceType: c5d.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicB"
                WeightedCapacity: 8
              - InstanceType: c5d.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicC"
                WeightedCapacity: 8
              - InstanceType: r5.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicA"
                WeightedCapacity: 9
              - InstanceType: r5.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicB"
                WeightedCapacity: 9
              - InstanceType: r5.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicC"
                WeightedCapacity: 9
              - InstanceType: r5d.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicA"
                WeightedCapacity: 9
              - InstanceType: r5d.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicB"
                WeightedCapacity: 9
              - InstanceType: r5d.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicC"
                WeightedCapacity: 9
              - InstanceType: r5a.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicA"
                WeightedCapacity: 8
              - InstanceType: r5a.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicB"
                WeightedCapacity: 8
              - InstanceType: r5a.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicC"
                WeightedCapacity: 8
              - InstanceType: r5ad.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicA"
                WeightedCapacity: 8
              - InstanceType: r5ad.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicB"
                WeightedCapacity: 8
              - InstanceType: r5ad.large
                SubnetId:
                  "Fn::ImportValue":
                    !Sub "${InfrastructureStack}-PublicC"
                WeightedCapacity: 8

  ReplicaLogMetricsFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3GethBucketName
        S3Key: logMonitor-v8.zip
      Description: "A lambda function to process Geth logs into metrics"
      Environment:
        Variables:
          CLUSTER_ID: !Sub ${KafkaTopic}
      Handler: "logMonitor.replicaHandler"
      Role: !Sub ${LogMetricsRole.Arn}
      Runtime: python3.7
  ReplicaLogMetricsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub ${ReplicaLogMetricsFunction.Arn}
      FilterPattern: '{$.systemdUnit = "geth.service"}'
      LogGroupName: !Ref ReplicaLG
  ReplicaLogMetricFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub ${ReplicaLogMetricsFunction.Arn}
      Action: 'lambda:InvokeFunction'
      Principal: !Sub logs.${AWS::Region}.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub ${ReplicaLG.Arn}
