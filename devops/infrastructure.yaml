Description: Ether Cattle infrastructure (Kafka and Internal Load Balancers)

Parameters:
  KafkaCount:
    Default: 3
    Type: Number
    Description: How many Kafka nodes should comprise the cluster.
  KafkaSpotTargetCapacity:
    Default: 0
    Type: Number
    Description: How many weighted capacity units to request from the spot fleet
  KafkaInstanceType:
    AllowedValues:
      - t2.micro
      - t3.micro
      - t2.small
      - t3.small
      - t2.medium
      - t3.medium
      - t2.large
      - t3.large
      - t2.xlarge
      - t3.xlarge
      - t2.2xlarge
      - t3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.8xlarge
      - c5d.large
      - c5d.xlarge
      - c5d.2xlarge
      - c5d.4xlarge
      - c5d.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
    ConstraintDescription: Must be a valid EC2 HVM instance type.
    Default: t3.small
    Description: EC2 HVM instance type (t2.micro, m3.medium, etc).
    Type: String
  KafkaDiskSize:
    Default: '8'
    Description: Size of Kafka node's ephemeral storage volume in GiB
    MaxValue: '1024'
    MinValue: '8'
    Type: Number
  KafkaDiskType:
    AllowedValues:
    - standard
    - gp2
    - st1
    - sc1
    Default: gp2
    Description: Kafka ephemeral storage volume type
    Type: String
  ClusterId:
    Type: String
    Description: An identifier for this ethercattle cluster.
  ClusterAmi:
    Default: ami-0f7f8edb4fe82cf70
    Type: String
    Description: The base AMI for all cluster nodes
  KeyName:
    Type: String
    Description: The name of the SSH key pair allowed to SSH into the docker nodes
  VpcId:
    Type: String
    Description: The VPC to deploy this stack into
  VpcBaseIp:
    Type: String
    Description: First two octets of the VPC's ipv4 CIDR
  InternetGatewayId:
    Type: String
    Description: The resource ID of the Internet gateway for the specified VPC

Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasKafkaNodes: !Not [!Equals [!Ref KafkaCount, 0]]
  IsProd: !Equals [!Ref ClusterId, "prod"]

Resources:
  # TODO: Sooner or later we should probably put some of this on private subnets
  PublicA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: !Join ["", [!Ref VpcBaseIp, ".160.0/24"]]
      AvailabilityZone: !Join ["", [!Ref 'AWS::Region', "a"]]
      MapPublicIpOnLaunch: true
  PublicB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: !Join ["", [!Ref VpcBaseIp, ".161.0/24"]]
      AvailabilityZone: !Join ["", [!Ref 'AWS::Region', "b"]]
      MapPublicIpOnLaunch: true
  PublicC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: !Join ["", [!Ref VpcBaseIp, ".162.0/24"]]
      AvailabilityZone: !Join ["", [!Ref 'AWS::Region', "c"]]
      MapPublicIpOnLaunch: true
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcId
  PublicInternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGatewayId
  PublicARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicA
  PublicBRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicB
  PublicCRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicC

  MetricsConfigParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Type: String
      Value: '{"metrics":{"append_dimensions":{"AutoScalingGroupName":"${aws:AutoScalingGroupName}"},"metrics_collected":{"cpu":{"measurement":["cpu_usage_idle","cpu_usage_iowait","cpu_usage_user","cpu_usage_system","cpu_usage_irq","cpu_usage_softirq"],"metrics_collection_interval":60,"resources":["*"],"totalcpu":false},"disk":{"measurement":["used_percent","inodes_free"],"metrics_collection_interval":60,"resources":["*"]},"diskio":{"measurement":["io_time"],"metrics_collection_interval":60,"resources":["*"]},"mem":{"measurement":["mem_used_percent"],"metrics_collection_interval":60},"statsd":{"metrics_aggregation_interval":60,"metrics_collection_interval":10,"service_address":":8125"},"swap":{"measurement":["swap_used_percent"],"metrics_collection_interval":60}}}}'
  KafkaNodeCluster:
    Type: AWS::ECS::Cluster
  KafkaNodeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - autoscaling.amazonaws.com
        Version: '2012-10-17'
  KafkaNodePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref KafkaNodeRole
      PolicyName: !Sub
        - "KafkaNodes${ClusterId}"
        - ClusterId: !Ref ClusterId
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
              - cloudwatch:PutMetricData
              - ec2:DescribeTags
              - logs:DescribeLogStreams
              - logs:DescribeLogGroups
            Effect: Allow
            Resource: "*"
            Sid: Stmt3
          - Action:
              - "ecs:CreateCluster"
              - "ecs:DeregisterContainerInstance"
              - "ecs:DiscoverPollEndpoint"
              - "ecs:Poll"
              - "ecs:RegisterContainerInstance"
              - "ecs:StartTelemetrySession"
              - "ecs:UpdateContainerInstancesState"
              - "ecs:Submit*"
              - "ecr:GetAuthorizationToken"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
            Effect: Allow
            Resource: "*"
            Sid: Stmt4
          - Action:
              - ssm:GetParameter
            Resource: !Sub "arn:aws:ssm:*:*:parameter/${MetricsConfigParameter}"
            Effect: Allow
  KafkaLG:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Sub ${ClusterId}KafkaLG
  KafkaClusterAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicA
        - !Ref PublicB
        - !Ref PublicC
      LaunchTemplate:
        LaunchTemplateId: !Ref KafkaClusterLaunchTemplateStandard
        Version: !Sub ${KafkaClusterLaunchTemplateStandard.LatestVersionNumber}
      MinSize: !Ref KafkaCount
      MaxSize: 7
      DesiredCapacity: !Ref KafkaCount
      HealthCheckType: EC2
      MetricsCollection:
      - Granularity: 1Minute
        Metrics:
        - GroupInServiceInstances
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}
        PropagateAtLaunch: 'true'
      # TODO: Review and revise
      NotificationConfigurations:
        - NotificationTypes:
            - "autoscaling:EC2_INSTANCE_LAUNCH"
          TopicARN: arn:aws:sns:us-east-2:201322628656:asg-test
    DependsOn:
      - KafkaNodeRole
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref KafkaCount
        MaxBatchSize: '1'
        PauseTime: PT5M
        SuspendProcesses:
        - AlarmNotification
        WaitOnResourceSignals: false
  KafkaNodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
      - !Ref KafkaNodeRole
    DependsOn: KafkaNodeRole
  KafkaNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow external SSH access
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Join ["", [!Ref VpcBaseIp, ".0.0/16"]]
      - IpProtocol: tcp
        FromPort: '2377'
        ToPort: '2377'
        CidrIp: !Join ["", [!Ref VpcBaseIp, ".0.0/16"]]
      - IpProtocol: tcp
        FromPort: '7946'
        ToPort: '7946'
        CidrIp: !Join ["", [!Ref VpcBaseIp, ".0.0/16"]]
      - IpProtocol: udp
        FromPort: '7946'
        ToPort: '7946'
        CidrIp: !Join ["", [!Ref VpcBaseIp, ".0.0/16"]]
      - IpProtocol: udp
        FromPort: '4789'
        ToPort: '4789'
        CidrIp: !Join ["", [!Ref VpcBaseIp, ".0.0/16"]]
  KafkaClusterLaunchTemplateStandard:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref ClusterAmi
        CreditSpecification:
          CpuCredits: standard
        InstanceType: !Ref KafkaInstanceType
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${ClusterId}-Int"
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Sub "${ClusterId}-Int"
        SecurityGroupIds:
          - !Sub ${KafkaNodeSecurityGroup.GroupId}

        IamInstanceProfile:
          Name: !Ref KafkaNodeInstanceProfile
        KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
        BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
        - DeviceName: "/dev/xvdcz"
          Ebs:
            VolumeSize: 22
            VolumeType: gp2
        - DeviceName: "/dev/sdb"
          Ebs:
            VolumeSize: !Ref KafkaDiskSize
            VolumeType: !Ref KafkaDiskType
        UserData:
          "Fn::Base64": !Sub |
            #!/bin/bash -xe
            CLUSTER_NAME=${KafkaNodeCluster}
            if [ "$(arch)" == "x86_64" ]
            then
              ARCH="amd64"
            elif [ "$(arch)" == "aarch64" ]
            then
              ARCH="arm64"
            fi

            # Set ECS agent HTTP proxy
            if [ ! -f /var/lib/cloud/instance/sem/config_ecs-cluster-name ]; then
              echo "ECS_CLUSTER=$CLUSTER_NAME" >> /etc/ecs/ecs.config
              echo "$$: $(date +%s.%N | cut -b1-13)" > /var/lib/cloud/instance/sem/config_ecs-cluster-name
            fi
            yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/$ARCH/latest/amazon-cloudwatch-agent.rpm
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${MetricsConfigParameter} -s
            mkfs.ext4 /dev/nvme1n1
            mkdir -p /var/lib/docker/volumes
            mount /dev/nvme1n1 /var/lib/docker/volumes
            systemctl enable amazon-cloudwatch-agent.service
            systemctl start amazon-cloudwatch-agent.service

  KafkaClusterSpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: diversified
        IamFleetRole: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-ec2-spot-fleet-tagging-role"
        TargetCapacity: !Ref KafkaSpotTargetCapacity
        SpotPrice: 0.0104
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref KafkaClusterLaunchTemplateStandard
              Version: !Sub ${KafkaClusterLaunchTemplateStandard.LatestVersionNumber}
            Overrides:
              - InstanceType: t3.micro
                SubnetId: !Ref PublicA
                WeightedCapacity: 1
              - InstanceType: t3.micro
                SubnetId: !Ref PublicB
                WeightedCapacity: 1
              - InstanceType: t3.small
                SubnetId: !Ref PublicA
                WeightedCapacity: 2
              - InstanceType: t3.small
                SubnetId: !Ref PublicB
                WeightedCapacity: 2
              - InstanceType: t3.small
                SubnetId: !Ref PublicC
                WeightedCapacity: 2
              - InstanceType: t3.medium
                SubnetId: !Ref PublicA
                WeightedCapacity: 4
              - InstanceType: t3.medium
                SubnetId: !Ref PublicB
                WeightedCapacity: 4
              - InstanceType: t3.medium
                SubnetId: !Ref PublicC
                WeightedCapacity: 4
              - InstanceType: t2.small
                SubnetId: !Ref PublicA
                WeightedCapacity: 2
              - InstanceType: t2.small
                SubnetId: !Ref PublicB
                WeightedCapacity: 2
              - InstanceType: t2.small
                SubnetId: !Ref PublicC
                WeightedCapacity: 2
              - InstanceType: t2.medium
                SubnetId: !Ref PublicA
                WeightedCapacity: 4
              - InstanceType: t2.medium
                SubnetId: !Ref PublicB
                WeightedCapacity: 4
              - InstanceType: t2.medium
                SubnetId: !Ref PublicC
                WeightedCapacity: 4
              - InstanceType: m5.large
                SubnetId: !Ref PublicA
                WeightedCapacity: 9
              - InstanceType: m5.large
                SubnetId: !Ref PublicB
                WeightedCapacity: 9
              - InstanceType: m5.large
                SubnetId: !Ref PublicC
                WeightedCapacity: 9
              - InstanceType: m5a.large
                SubnetId: !Ref PublicA
                WeightedCapacity: 8
              - InstanceType: m5a.large
                SubnetId: !Ref PublicB
                WeightedCapacity: 8
              - InstanceType: m5a.large
                SubnetId: !Ref PublicC
                WeightedCapacity: 8
              - InstanceType: m5d.large
                SubnetId: !Ref PublicA
                WeightedCapacity: 9
              - InstanceType: m5d.large
                SubnetId: !Ref PublicB
                WeightedCapacity: 9
              - InstanceType: m5d.large
                SubnetId: !Ref PublicC
                WeightedCapacity: 9
              - InstanceType: m4.large
                SubnetId: !Ref PublicA
                WeightedCapacity: 7
              - InstanceType: m4.large
                SubnetId: !Ref PublicB
                WeightedCapacity: 7
              - InstanceType: m4.large
                SubnetId: !Ref PublicC
                WeightedCapacity: 7
              - InstanceType: c5.large
                SubnetId: !Ref PublicA
                WeightedCapacity: 8
              - InstanceType: c5.large
                SubnetId: !Ref PublicB
                WeightedCapacity: 8
              - InstanceType: c5.large
                SubnetId: !Ref PublicC
                WeightedCapacity: 8
              - InstanceType: c5d.large
                SubnetId: !Ref PublicA
                WeightedCapacity: 8
              - InstanceType: c5d.large
                SubnetId: !Ref PublicB
                WeightedCapacity: 8
              - InstanceType: c5d.large
                SubnetId: !Ref PublicC
                WeightedCapacity: 8
              - InstanceType: c4.large
                SubnetId: !Ref PublicA
                WeightedCapacity: 6
              - InstanceType: c4.large
                SubnetId: !Ref PublicB
                WeightedCapacity: 6
              - InstanceType: c4.large
                SubnetId: !Ref PublicC
                WeightedCapacity: 6
              - InstanceType: r5.large
                SubnetId: !Ref PublicA
                WeightedCapacity: 9
              - InstanceType: r5.large
                SubnetId: !Ref PublicB
                WeightedCapacity: 9
              - InstanceType: r5.large
                SubnetId: !Ref PublicC
                WeightedCapacity: 9
              - InstanceType: r5d.large
                SubnetId: !Ref PublicA
                WeightedCapacity: 9
              - InstanceType: r5d.large
                SubnetId: !Ref PublicB
                WeightedCapacity: 9
              - InstanceType: r5d.large
                SubnetId: !Ref PublicC
                WeightedCapacity: 9
              - InstanceType: r5a.large
                SubnetId: !Ref PublicA
                WeightedCapacity: 8
              - InstanceType: r5a.large
                SubnetId: !Ref PublicB
                WeightedCapacity: 8
              - InstanceType: r5a.large
                SubnetId: !Ref PublicC
                WeightedCapacity: 8
              - InstanceType: r4.large
                SubnetId: !Ref PublicA
                WeightedCapacity: 8
              - InstanceType: r4.large
                SubnetId: !Ref PublicB
                WeightedCapacity: 8
              - InstanceType: r4.large
                SubnetId: !Ref PublicC
                WeightedCapacity: 8
              - InstanceType: r3.large
                SubnetId: !Ref PublicA
                WeightedCapacity: 7
              - InstanceType: r3.large
                SubnetId: !Ref PublicB
                WeightedCapacity: 7
              - InstanceType: r3.large
                SubnetId: !Ref PublicC
                WeightedCapacity: 7

  ServiceNamespace:
    Type: "AWS::ServiceDiscovery::PrivateDnsNamespace"
    Properties:
      Vpc: !Ref VpcId
      Name: !Sub ${ClusterId}-ns
  ZooKeeperLG:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Sub /${ClusterId}/ZooKeeper
  ZooKeeperRegistryA:
    Type: "AWS::ServiceDiscovery::Service"
    Properties:
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
        NamespaceId: !Ref ServiceNamespace
      NamespaceId: !Ref ServiceNamespace
  ZooKeeperTaskDefinitionA:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: ZooKeeper
          # TODO: Update this? This image has listed known vulnerabilities on dockerhub, but no more recent versions available
          Image: zookeeper:3.4.13
          HealthCheck:
            StartPeriod: 60
            Command:
              - "CMD-SHELL"
              - 'echo "stat" | nc localhost 2181'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ZooKeeperLG
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref ClusterId
          MemoryReservation: 512
          PortMappings:
            - ContainerPort: 2181
            - ContainerPort: 2888
            - ContainerPort: 3888
          Environment:
            - Name: ZOO_MY_ID
              Value: 1
            - Name: ZOO_SERVERS
              Value: !Sub server.1=0.0.0.0:2888:3888 server.2=${ZooKeeperRegistryB.Name}.${ClusterId}-ns:2888:3888 server.3=${ZooKeeperRegistryC.Name}.${ClusterId}-ns:2888:3888
  ZooKeeperServiceA:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: zookeepera
      Cluster: !Ref KafkaNodeCluster
      SchedulingStrategy: REPLICA
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ZooKeeperSecurityGroup
          Subnets:
            - !Ref PublicA
            - !Ref PublicB
            - !Ref PublicC
      DesiredCount: 1
      TaskDefinition: !Ref ZooKeeperTaskDefinitionA
      ServiceRegistries:
        - RegistryArn: !Sub ${ZooKeeperRegistryA.Arn}
      PlacementConstraints:
        - Type: memberOf
          Expression: !Sub 'attribute:ecs.availability-zone == ${AWS::Region}a'
        - Type: distinctInstance
  ZooKeeperRegistryB:
    Type: "AWS::ServiceDiscovery::Service"
    Properties:
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
        NamespaceId: !Ref ServiceNamespace
      NamespaceId: !Ref ServiceNamespace
  ZooKeeperTaskDefinitionB:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: ZooKeeper
          # TODO: Update this? This image has listed known vulnerabilities on dockerhub, but no more recent versions available
          Image: zookeeper:3.4.13
          HealthCheck:
            StartPeriod: 60
            Command:
              - "CMD-SHELL"
              - 'echo "stat" | nc localhost 2181'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ZooKeeperLG
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref ClusterId
          MemoryReservation: 512
          PortMappings:
            - ContainerPort: 2181
            - ContainerPort: 2888
            - ContainerPort: 3888
          Environment:
            - Name: ZOO_MY_ID
              Value: 2
            - Name: ZOO_SERVERS
              Value: !Sub server.1=${ZooKeeperRegistryA.Name}.${ClusterId}-ns:2888:3888 server.2=0.0.0.0:2888:3888 server.3=${ZooKeeperRegistryC.Name}.${ClusterId}-ns:2888:3888
  ZooKeeperServiceB:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: zookeeperb
      Cluster: !Ref KafkaNodeCluster
      SchedulingStrategy: REPLICA
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ZooKeeperSecurityGroup
          Subnets:
            - !Ref PublicA
            - !Ref PublicB
            - !Ref PublicC
      DesiredCount: 1
      TaskDefinition: !Ref ZooKeeperTaskDefinitionB
      ServiceRegistries:
        - RegistryArn: !Sub ${ZooKeeperRegistryB.Arn}
      PlacementConstraints:
        - Type: memberOf
          Expression: !Sub 'attribute:ecs.availability-zone == ${AWS::Region}b'
        - Type: distinctInstance
  ZooKeeperRegistryC:
    Type: "AWS::ServiceDiscovery::Service"
    Properties:
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
        NamespaceId: !Ref ServiceNamespace
      NamespaceId: !Ref ServiceNamespace
  ZooKeeperTaskDefinitionC:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: ZooKeeper
          # TODO: Update this? This image has listed known vulnerabilities on dockerhub, but no more recent versions available
          Image: zookeeper:3.4.13
          HealthCheck:
            StartPeriod: 60
            Command:
              - "CMD-SHELL"
              - 'echo "stat" | nc localhost 2181'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ZooKeeperLG
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref ClusterId
          MemoryReservation: 512
          PortMappings:
            - ContainerPort: 2181
            - ContainerPort: 2888
            - ContainerPort: 3888
          Environment:
            - Name: ZOO_MY_ID
              Value: 3
            - Name: ZOO_SERVERS
              Value: !Sub server.1=${ZooKeeperRegistryA.Name}.${ClusterId}-ns:2888:3888 server.2=${ZooKeeperRegistryB.Name}.${ClusterId}-ns:2888:3888 server.3=0.0.0.0:2888:3888
  ZooKeeperServiceC:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: zookeeperc
      Cluster: !Ref KafkaNodeCluster
      SchedulingStrategy: REPLICA
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ZooKeeperSecurityGroup
          Subnets:
            - !Ref PublicA
            - !Ref PublicB
            - !Ref PublicC
      DesiredCount: 1
      TaskDefinition: !Ref ZooKeeperTaskDefinitionC
      ServiceRegistries:
        - RegistryArn: !Sub ${ZooKeeperRegistryC.Arn}
      PlacementConstraints:
        - Type: memberOf
          Expression: !Sub 'attribute:ecs.availability-zone == ${AWS::Region}c'
        - Type: distinctInstance

  Kafka2RegistryA:
    Type: "AWS::ServiceDiscovery::Service"
    Properties:
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
        NamespaceId: !Ref ServiceNamespace
      NamespaceId: !Ref ServiceNamespace
  Kafka2TaskDefinitionA:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: Kafka
          Image: wurstmeister/kafka:2.12-2.1.1
          HealthCheck:
            StartPeriod: 60
            Command:
              - "CMD-SHELL"
              - !Sub '/opt/kafka_2.12-2.1.1/bin/kafka-topics.sh --zookeeper ${ZooKeeperRegistryA.Name}.${ClusterId}-ns:2181 --list'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref KafkaLG
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref ClusterId
          MemoryReservation: 512
          PortMappings:
            - ContainerPort: 9092
          Environment:
            - Name: KAFKA_ZOOKEEPER_CONNECT
              Value: !Sub ${ZooKeeperRegistryA.Name}.${ClusterId}-ns:2181
            - Name: KAFKA_ADVERTISED_HOST_NAME
              Value: !Sub ${Kafka2RegistryA.Name}.${ClusterId}-ns
            - Name: KAFKA_BROKER_ID
              Value: 10
            - Name: KAFKA_COMPRESSION_TYPE
              Value: snappy
            - Name: KAFKA_DEFAULT_REPLICATION_FACTOR
              Value: "2"
  Kafka2ServiceA:
    Type: AWS::ECS::Service
    DependsOn:
      - ZooKeeperServiceA
      - ZooKeeperServiceB
      - ZooKeeperServiceC
    Properties:
      ServiceName: kafka2a
      Cluster: !Ref KafkaNodeCluster
      SchedulingStrategy: REPLICA
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref KafkaSecurityGroup
          Subnets:
            - !Ref PublicA
            - !Ref PublicB
            - !Ref PublicC
      DesiredCount: 1
      TaskDefinition: !Ref Kafka2TaskDefinitionA
      ServiceRegistries:
        - RegistryArn: !Sub ${Kafka2RegistryA.Arn}
      PlacementConstraints:
        - Type: memberOf
          Expression: !Sub 'not(task:group == service:kafka2b) and not(task:group == service:kafka2c)'
        - Type: distinctInstance
  Kafka2RegistryB:
    Type: "AWS::ServiceDiscovery::Service"
    Properties:
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
        NamespaceId: !Ref ServiceNamespace
      NamespaceId: !Ref ServiceNamespace
  Kafka2TaskDefinitionB:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: Kafka
          Image: wurstmeister/kafka:2.12-2.1.1
          HealthCheck:
            StartPeriod: 60
            Command:
              - "CMD-SHELL"
              - !Sub '/opt/kafka_2.12-2.1.1/bin/kafka-topics.sh --zookeeper ${ZooKeeperRegistryB.Name}.${ClusterId}-ns:2181 --list'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref KafkaLG
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref ClusterId
          MemoryReservation: 512
          PortMappings:
            - ContainerPort: 9092
          Environment:
            - Name: KAFKA_ZOOKEEPER_CONNECT
              Value: !Sub ${ZooKeeperRegistryB.Name}.${ClusterId}-ns:2181
            - Name: KAFKA_ADVERTISED_HOST_NAME
              Value: !Sub ${Kafka2RegistryB.Name}.${ClusterId}-ns
            - Name: KAFKA_BROKER_ID
              Value: 11
            - Name: KAFKA_COMPRESSION_TYPE
              Value: snappy
            - Name: KAFKA_DEFAULT_REPLICATION_FACTOR
              Value: "2"
  Kafka2ServiceB:
    Type: AWS::ECS::Service
    DependsOn:
      - ZooKeeperServiceA
      - ZooKeeperServiceB
      - ZooKeeperServiceC
    Properties:
      ServiceName: kafka2b
      Cluster: !Ref KafkaNodeCluster
      SchedulingStrategy: REPLICA
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref KafkaSecurityGroup
          Subnets:
            - !Ref PublicA
            - !Ref PublicB
            - !Ref PublicC
      DesiredCount: 1
      TaskDefinition: !Ref Kafka2TaskDefinitionB
      ServiceRegistries:
        - RegistryArn: !Sub ${Kafka2RegistryB.Arn}
      PlacementConstraints:
        - Type: memberOf
          Expression: !Sub 'not(task:group == service:kafka2a) and not(task:group == service:kafka2c)'
        - Type: distinctInstance
  Kafka2RegistryC:
    Type: "AWS::ServiceDiscovery::Service"
    Properties:
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
        NamespaceId: !Ref ServiceNamespace
      NamespaceId: !Ref ServiceNamespace
  Kafka2TaskDefinitionC:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: Kafka
          Image: wurstmeister/kafka:2.12-2.1.1
          HealthCheck:
            StartPeriod: 60
            Command:
              - "CMD-SHELL"
              - !Sub '/opt/kafka_2.12-2.1.1/bin/kafka-topics.sh --zookeeper ${ZooKeeperRegistryC.Name}.${ClusterId}-ns:2181 --list'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref KafkaLG
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref ClusterId
          MemoryReservation: 512
          PortMappings:
            - ContainerPort: 9092
          Environment:
            - Name: KAFKA_ZOOKEEPER_CONNECT
              Value: !Sub ${ZooKeeperRegistryC.Name}.${ClusterId}-ns:2181
            - Name: KAFKA_ADVERTISED_HOST_NAME
              Value: !Sub ${Kafka2RegistryC.Name}.${ClusterId}-ns
            - Name: KAFKA_BROKER_ID
              Value: 12
            - Name: KAFKA_COMPRESSION_TYPE
              Value: snappy
            - Name: KAFKA_DEFAULT_REPLICATION_FACTOR
              Value: "2"
  Kafka2ServiceC:
    Type: AWS::ECS::Service
    DependsOn:
      - ZooKeeperServiceA
      - ZooKeeperServiceB
      - ZooKeeperServiceC
    Properties:
      ServiceName: kafka2c
      Cluster: !Ref KafkaNodeCluster
      SchedulingStrategy: REPLICA
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref KafkaSecurityGroup
          Subnets:
            - !Ref PublicA
            - !Ref PublicB
            - !Ref PublicC
      DesiredCount: 1
      TaskDefinition: !Ref Kafka2TaskDefinitionC
      ServiceRegistries:
        - RegistryArn: !Sub ${Kafka2RegistryC.Arn}
      PlacementConstraints:
        - Type: memberOf
          Expression: !Sub 'not(task:group == service:kafka2a) and not(task:group == service:kafka2b)'
        - Type: distinctInstance


  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTPS Access
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: "0.0.0.0/0"

  KafkaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow client Access
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '9092'
        ToPort: '9092'
        CidrIp: !Join ["", [!Ref VpcBaseIp, ".0.0/16"]]

  ZooKeeperSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow client Access
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2181'
        ToPort: '2181'
        CidrIp: !Join ["", [!Ref VpcBaseIp, ".0.0/16"]]
  ZooKeeperSecurityGroupIngressRule2888:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ZooKeeperSecurityGroup
      IpProtocol: tcp
      FromPort: '2888'
      ToPort: '2888'
      SourceSecurityGroupId: !Ref ZooKeeperSecurityGroup
  ZooKeeperSecurityGroupIngressRule3888:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ZooKeeperSecurityGroup
      IpProtocol: tcp
      FromPort: '3888'
      ToPort: '3888'
      SourceSecurityGroupId: !Ref ZooKeeperSecurityGroup


  RPCALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets:
      - !Ref PublicA
      - !Ref PublicB
      - !Ref PublicC
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '10'
      SecurityGroups:
      - !Ref AlbSecurityGroup
      Tags:
      - Key: name
        Value: !Sub "${AWS::StackName}-RPC-Alb"
      # IpAddressType: dualstack
  RPCALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: "forward"
        TargetGroupArn: !Ref RPCALBGroup
      LoadBalancerArn: !Ref RPCALB
      Port: '80'
      Protocol: HTTP
  RPCALBGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      UnhealthyThresholdCount: 4
      HealthyThresholdCount: 4
      Port: 8545
      Protocol: HTTP
      VpcId: !Ref VpcId

Outputs:
  ClusterId:
    Description: The cluster ID
    Value: !Ref ClusterId
    Export:
      Name: !Sub "${AWS::StackName}-ClusterId"
  KafkaNodeCluster:
    Description: The Kafka node ECS cluster
    Value: !Ref KafkaNodeCluster
    Export:
      Name: !Sub "${AWS::StackName}-KafkaNodeCluster"
  RPCALBGroup:
    Description: The ARN of the alb target group for the RPC load balancer
    Value: !Ref RPCALBGroup
    Export:
      Name: !Sub "${AWS::StackName}-RPCALBGroup"
  VpcId:
    Description: The VPC the stack is deployed to
    Value: !Ref VpcId
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"
  VpcBaseIp:
    Description: The VpcBaseIp the stack is deployed to
    Value: !Ref VpcBaseIp
    Export:
      Name: !Sub "${AWS::StackName}-VpcBaseIp"
  Kafka2HostnameA:
    Description: The Kafka hostname for AZ 'a'
    Value: !Sub ${Kafka2RegistryA.Name}.${ClusterId}-ns:9092
    Export:
      Name: !Sub "${AWS::StackName}-Kafka2HostnameA"
  Kafka2HostnameB:
    Description: The Kafka hostname for AZ 'b'
    Value: !Sub ${Kafka2RegistryB.Name}.${ClusterId}-ns:9092
    Export:
      Name: !Sub "${AWS::StackName}-Kafka2HostnameB"
  Kafka2HostnameC:
    Description: The Kafka hostname for AZ 'c'
    Value: !Sub ${Kafka2RegistryC.Name}.${ClusterId}-ns:9092
    Export:
      Name: !Sub "${AWS::StackName}-Kafka2HostnameC"
  PublicA:
    Description: The Subnet in availability zone 'a'
    Value: !Ref PublicA
    Export:
      Name: !Sub "${AWS::StackName}-PublicA"
  PublicB:
    Description: The Subnet in availability zone 'b'
    Value: !Ref PublicB
    Export:
      Name: !Sub "${AWS::StackName}-PublicB"
  PublicC:
    Description: The Subnet in availability zone 'c'
    Value: !Ref PublicC
    Export:
      Name: !Sub "${AWS::StackName}-PublicC"
